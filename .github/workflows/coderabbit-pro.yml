name: CodeRabbit Pro – Policy Gate

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  issues: write  # Thêm quyền để quản lý nhãn

env:
  MAX_MEDIUM: 3
  MAX_CRITICAL_HIGH: 0

jobs:
  gate:
    name: Enforce Code Review Policy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Verify styleguide.md presence
        run: |
          if [ ! -f styleguide.md ]; then
            echo "::warning ::styleguide.md not found at repo root"
          else
            echo "styleguide.md found."
          fi

      - name: Small delay (let bot comment)
        run: sleep 15

      - name: Evaluate CodeRabbit findings
        id: evaluate
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr = context.payload.pull_request?.number;
            if (!pr) {
              core.setFailed('No pull_request in context. Ensure this workflow is triggered by a pull request event.');
              return;
            }

            const [reviewComments, issueComments] = await Promise.all([
              github.paginate(github.rest.pulls.listReviewComments, { owner, repo, pull_number: pr, per_page: 100 }),
              github.paginate(github.rest.issues.listComments, { owner, repo, issue_number: pr, per_page: 100 }),
            ]);

            const TAG = /^\s*\[(critical|high|medium)\]/i;
            const isFromBotOrTagged = c => c.user?.login === 'coderabbitai[bot]' || TAG.test(c.body || '');

            const comments = [...reviewComments, ...issueComments].filter(isFromBotOrTagged);

            let critical = 0, high = 0, medium = 0;
            for (const c of comments) {
              const m = (c.body || '').match(TAG);
              if (!m) continue;
              const lvl = m[1].toLowerCase();
              if (lvl === 'critical') critical++;
              else if (lvl === 'high') high++;
              else if (lvl === 'medium') medium++;
            }

            core.info(`Found: critical=${critical}, high=${high}, medium=${medium}`);

            core.setOutput('critical', String(critical));
            core.setOutput('high', String(high));
            core.setOutput('medium', String(medium));

            const maxMedium = Number(process.env.MAX_MEDIUM) || 3;
            const maxCriticalHigh = Number(process.env.MAX_CRITICAL_HIGH) || 0;
            if (medium > maxMedium || (critical + high) > maxCriticalHigh) {
              core.setFailed(`Policy failed: medium=${medium} (>${maxMedium}?) or critical+high=${critical+high} (>${maxCriticalHigh}?)`);
            }

      - name: Add labels based on CodeRabbit findings
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr = context.payload.pull_request?.number;
            if (!pr) {
              core.warning('No pull_request in context. Skipping labeling.');
              return;
            }

            const critical = Number('${{ steps.evaluate.outputs.critical }}');
            const high = Number('${{ steps.evaluate.outputs.high }}');
            const medium = Number('${{ steps.evaluate.outputs.medium }}');
            const maxMedium = Number(process.env.MAX_MEDIUM) || 3;
            const maxCriticalHigh = Number(process.env.MAX_CRITICAL_HIGH) || 0;

            const labelsToAdd = [];
            if (critical > 0) labelsToAdd.push('critical-issue');
            if (high > 0) labelsToAdd.push('high-issue');
            if (medium > maxMedium) labelsToAdd.push('medium-issue');
            if (medium > maxMedium || (critical + high) > maxCriticalHigh) {
              labelsToAdd.push('needs-changes');
            }

            if (labelsToAdd.length > 0) {
              try {
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number: pr,
                  labels: labelsToAdd
                });
                core.info(`Added labels: ${labelsToAdd.join(', ')}`);
              } catch (error) {
                core.warning(`Failed to add labels: ${error.message}`);
              }
            } else {
              core.info('No labels to add.');
            }

      - name: Comment summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const pr = context.payload.pull_request?.number;
            if (!pr) {
              core.warning('No pull_request in context. Skipping comment.');
              return;
            }

            const critical = '${{ steps.evaluate.outputs.critical }}';
            const high = '${{ steps.evaluate.outputs.high }}';
            const medium = '${{ steps.evaluate.outputs.medium }}';

            const body = [
              '### Code Review Policy Check',
              '',
              `- critical: **${critical}**`,
              `- high: **${high}**`,
              `- medium: **${medium}**`,
              '',
              `> Fail when (medium > ${process.env.MAX_MEDIUM || 3}) OR (critical+high > ${process.env.MAX_CRITICAL_HIGH || 0}).`
            ].join('\n');

            try {
              await github.rest.issues.createComment({
                owner, repo, issue_number: pr, body
              });
            } catch (error) {
              core.warning(`Failed to post comment: ${error.message}`);
            }